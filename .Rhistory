load(February_ED)
load("February_ED.RData")
laod("March_EC.RData")
load("March_EC.RData")
colnames(marchMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR") print  (colnames(marchMatx))
colnames(marchMatx)
marchMatx <- March_EC
colnames(marchMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR") print  (colnames(marchMatx))
marchMatx <- March_EC
colmanes(marchMatx)
colnames(marchMatx)
colnames(marchMatx)
c("X", "Y", "Z", "R", "G", "B", "SCLR")
load("February_ED.RData")
load("March_EC.RData")
marchMatx <- March_EC
##MARCH TO FEBRUARY##
##Construct matrix from csv files marchMatx = as.matrix(March_EC)
colnames(marchMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR") print  (colnames(marchMatx))
colnames(marchMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print(colnames(marchMatx))
head (marchMatx)
febMatx <- as.matrix(February_EC)
colnames(febMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print  (colnames(febMatx)) head(febMatx)
print(colnames(febMatx)) head(febMatx)
head(febMatx)
dist_MF <- matrix(NA, nrow = length(febMatx[,"X"]), ncol = length(marchMatx[,"X"])) ##Must use matrix with larger row count or matrix wont be large enough to store the larger dataset
length(febMatx[,"X"])
length(marchMatx[,"X"])
load("February_ED.RData")
load("March_EC.RData")
marchMatx <- March_EC
##MARCH TO FEBRUARY##
##Construct matrix from csv files marchMatx = as.matrix(March_EC)
colnames(marchMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print(colnames(marchMatx))
head (marchMatx)
febMatx <- February_EC
colnames(febMatx) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print(colnames(febMatx))
head(febMatx)
load("February_ED.RData")
load("March_EC.RData")
##MARCH TO FEBRUARY##
##Construct matrix from csv files marchMatx = as.matrix(March_EC)
colnames(March_EC) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print(colnames(March_EC))
head (March_EC)
colnames(February_EC) <- c("X", "Y", "Z", "R", "G", "B", "SCLR")
print(colnames(February_EC))
head(February_EC)
#here are some different ways to visualize your data
library(scatterplot3d)
scatterplot3d(February_EC[,1:3])
library(plot3D) #another cool package
################
library(akima)
Feb_mesh <- mesh(February_EC[,1],February_EC[,2],February_EC[,3])
arv = data.frame(axis_x = rnorm(n=300, mean=-0.20, sd=1.01),
axis_y = rnorm(n=300, mean=-0.45, sd=0.97),
elevation = rnorm(n=300, mean=-813.2, sd=13.89))
arv
View(February_EC)
model = lm(formula = elevation ~ (axis_x + axis_y)^2 + I(axis_x^2) + I(axis_y^2), data = arv)
# grid for plotting function
x <- seq(min(arv$axis_x), max(arv$axis_x), length.out = 20)
y <- seq(min(arv$axis_y), max(arv$axis_y), length.out = 20)
# function for predicted surface from model
f <- function(x, y) { cbind(1,x,y,x^2,y^2,x*y) %*% coef(model) }
# predicted values in form that persp() can use
z <- outer(x, y, f)
# 3d plot of surface with persp()
ele_3d <- persp(x=x,y=y,z=z, theta=40, phi=15, zlim=c(min(arv$elevation), max(arv$elevation)) )
# transform observed values into 2d space
elevation_points <- trans3d(arv$axis_x, arv$axis_y, arv$elevation, pmat=ele_3d)
# plot observed values
points(elevation_points)
# add dotted lines from surface to observed values
fit_vals <- trans3d(arv$axis_x, arv$axis_y, fitted(model), pmat = ele_3d)
segments(fit_vals$x, fit_vals$y, elevation_points$x, elevation_points$y, lty = 3)
model = lm(formula = Z ~ (X + Y)^2 + I(X^2) + I(Y^2), data = February_EC)
x <- seq(min(February_EC$X), max(February_EC$X), length.out = 20)
y <- seq(min(February_EC$Y), max(February_EC$Y), length.out = 20)
# function for predicted surface from model
f <- function(x, y) { cbind(1,x,y,x^2,y^2,x*y) %*% coef(model) }
z <- outer(x, y, f)
ele_3d <- persp(x=x,y=y,z=z, theta=40, phi=15, zlim=c(min(February_EC$Z), max(February_EC$Z)) )
elevation_points <- trans3d(February_EC$X, February_EC$Y, February_EC$Z, pmat=ele_3d)
points(elevation_points)
fit_vals <- trans3d(February_EC$X, February_EC$Y, fitted(model), pmat = ele_3d)
segments(fit_vals$x, fit_vals$y, elevation_points$x, elevation_points$y, lty = 3)
model = lm(formula = Z ~ (X + Y)^3 + I(X^3) + I(Y^3), data = February_EC)
# grid for plotting function
x <- seq(min(February_EC$X), max(February_EC$X), length.out = 20)
y <- seq(min(February_EC$Y), max(February_EC$Y), length.out = 20)
# function for predicted surface from model
f <- function(x, y) { cbind(1,x,y,x^2,y^2,x*y) %*% coef(model) }
# predicted values in form that persp() can use
z <- outer(x, y, f)
# 3d plot of surface with persp()
ele_3d <- persp(x=x,y=y,z=z, theta=40, phi=15, zlim=c(min(February_EC$Z), max(February_EC$Z)) )
# transform observed values into 2d space
elevation_points <- trans3d(February_EC$X, February_EC$Y, February_EC$Z, pmat=ele_3d)
# plot observed values
points(elevation_points)
# add dotted lines from surface to observed values
x <- seq(min(February_EC$X), max(February_EC$X), length.out = 200)
y <- seq(min(February_EC$Y), max(February_EC$Y), length.out = 200)
# function for predicted surface from model
f <- function(x, y) { cbind(1,x,y,x^2,y^2,x*y) %*% coef(model) }
# predicted values in form that persp() can use
z <- outer(x, y, f)
# 3d plot of surface with persp()
ele_3d <- persp(x=x,y=y,z=z, theta=40, phi=15, zlim=c(min(February_EC$Z), max(February_EC$Z)) )
# transform observed values into 2d space
elevation_points <- trans3d(February_EC$X, February_EC$Y, February_EC$Z, pmat=ele_3d)
# plot observed values
points(elevation_points)
# add dotted lines from surface to observed values
fit_vals <- trans3d(February_EC$X, February_EC$Y, fitted(model), pmat = ele_3d)
segments(fit_vals$x, fit_vals$y, elevation_points$x, elevation_points$y, lty = 3)
Feb_mesh <- mesh(February_EC[,1],February_EC[,2],February_EC[,3])
Feb_surface <- interp(February_EC[,1],February_EC[,2],February_EC[,3])
surface3d(Feb_surface$x,Feb_surface$y,Feb_surface$z)
?mesh
Feb_mesh
Feb_mesh <- mesh(February_EC[,1],February_EC[,2],February_EC[,3])
Feb_mesh <- mesh(February_EC[1:10,1],February_EC[1:10,2],February_EC[1:10,3])
Feb_mesh
Feb_surface <- interp(February_EC[,1],February_EC[,2],February_EC[,3])
surface3d(Feb_surface$x,Feb_surface$y,Feb_surface$z)
?interp
library(rgl)
surface3d(Feb_surface$x,Feb_surface$y,Feb_surface$z)
surface3d(Feb_surface$x,Feb_surface$y,Feb_surface$z)
Mar_surface <- interp(March_EC[,1],March_EC[,2],March_EC[,3])
surface3d(Mar_surface$x,Mar_surface$y,Mar_surface$z)
